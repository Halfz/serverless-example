Description: Serverless Application Template
Parameters:
  ServiceName:
    Description: Service Name [a-zA-Z][a-zA-Z0-9-_]*
    Type: String
    Default: MyService
  Handler:
    Description: Node handler
    Type: String
    Default: index.handler
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: !Ref Handler
      Role: !GetAtt LambdaRole.Arn
      MemorySize: 128
      Timeout: 10
      Runtime: nodejs10.x
      FunctionName: !Ref ServiceName
      Code: ../build/packaged.zip
      TracingConfig:
        Mode: Active
  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    DependsOn:
      - Api
      - LambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/"
  lambdaApiGatewayInvokeProxy:
    Type: AWS::Lambda::Permission
    DependsOn:
      - Api
      - LambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*"
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref ServiceName
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      Path: /
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ServiceName
      EndpointConfiguration:
        Types:
          - EDGE
      BinaryMediaTypes:
        - '*/*'
  ApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      RestApiId: !Ref Api
      PathPart: '{proxy+}'
  ApiRootMethod:
    DependsOn:
      - lambdaApiGatewayInvoke
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId: !GetAtt Api.RootResourceId
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        ConnectionType: INTERNET
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations
          - Arn:
              Fn::GetAtt:
                - LambdaFunction
                - Arn
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
  ApiProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn:
      - lambdaApiGatewayInvokeProxy
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref ApiProxyResource
      RestApiId: !Ref Api
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        ConnectionType: INTERNET
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations
          - Arn:
              Fn::GetAtt:
                - LambdaFunction
                - Arn
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
  Deployment:
    DependsOn:
      - ApiRootMethod
      - ApiProxyMethod
      - lambdaApiGatewayInvoke
      - lambdaApiGatewayInvokeProxy
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref Api
      StageName: prod
  LambdaWarmer:
    Type: AWS::Events::Rule
    Properties:
      Name: !Ref ServiceName
      Description: "ScheduledRule"
      ScheduleExpression: "rate(5 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: !Ref ServiceName
          Input: '{ "warmer":true,"concurrency":3 }'
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt LambdaWarmer.Arn
Outputs:
  ApiUrl:
    Description: "API Prod stage endpoint"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/"
